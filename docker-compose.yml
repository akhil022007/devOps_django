version: '3.8'

services:
  db:
   image: postgres:13
     container_name: mydjango_db
     environment:
       POSTGRES_DB: ${DB_NAME:-mydjangoappdb}
       POSTGRES_USER: ${DB_USER:-mydjangoappuser}
       POSTGRES_PASSWORD: ${DB_PASSWORD:-mydjangoapppassword}
     volumes:
       - db_data:/var/lib/postgresql/data
     ports:
       - "5432:5432"
     healthcheck:
       test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mydjangoappuser} -d ${DB_NAME:-mydjangoappdb}"]
       interval: 5s
       timeout: 5s
       retries: 5

  web:
     build: .
     container_name: mydjango_web
    # Simplified command: relies on environment variables being set by Docker Compose
     command: >
       sh -c "
       /usr/local/bin/python /app/manage.py wait_for_db &&
       /usr/local/bin/python /app/manage.py migrate --noinput &&
       /usr/local/bin/python /app/manage.py collectstatic --noinput &&
       /usr/local/bin/python /app/manage.py runserver 0.0.0.0:8000
       "
     volumes:
       - .:/app
     ports:
       - "8000:8000"
    # Environment variables for the Django application, passed from Jenkins
     environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY} # This will be interpolated by Docker Compose
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      DB_NAME: ${DB_NAME:-mydjangoappdb}
      DB_USER: ${DB_USER:-mydjangoappuser}
      DB_PASSWORD: ${DB_PASSWORD:-mydjangoapppassword}
      DB_HOST: db # This matches the service name of the database container
      DB_PORT: ${DB_PORT:-5432}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-True}
     depends_on:
       - db
     healthcheck:
       test: ["CMD", "curl", "-f", "http://localhost:8000"]
       interval: 10s
       timeout: 5s
       retries: 5
       start_period: 20s

volumes:
  db_data:
